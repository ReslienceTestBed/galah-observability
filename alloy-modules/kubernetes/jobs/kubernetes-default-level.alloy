declare "default_level" {
	argument "forward_to" {
		comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
	}

	argument "default_level" {
		comment  = "The default log level to use if one is not set (default: unknown)"
		optional = true
		default  = "unknown"
	}

	export "receiver" {
		value = loki.process.level_default.receiver
	}

	loki.process "level_default" {
		forward_to = argument.forward_to.value

		//Parsing
		// default level to unknown
		stage.static_labels {
			values = {
				level = argument.default_level.value,
			}
		}

		// default level to unknown
		stage.static_labels {
			values = {
				log_type = "unknown",
			}
		}

		// check to see if the log line matches the klog format (https://github.com/kubernetes/klog)
		stage.match {
			// unescaped regex: ([IWED][0-9]{4}\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]+)
			selector = "{level=\"" + argument.default_level.value + "\"} |~ \"([IWED][0-9]{4}\\\\s+[0-9]{2}:[0-9]{2}:[0-9]{2}\\\\.[0-9]+)\""

			// extract log level, klog uses a single letter code for the level followed by the month and day i.e. I0119
			stage.regex {
				expression = "((?P<level>[A-Z])[0-9])"
			}

			// if the extracted level is I set INFO
			stage.replace {
				source     = "level"
				expression = "(I)"
				replace    = "INFO"
			}

			// if the extracted level is W set WARN
			stage.replace {
				source     = "level"
				expression = "(W)"
				replace    = "WARN"
			}

			// if the extracted level is E set ERROR
			stage.replace {
				source     = "level"
				expression = "(E)"
				replace    = "ERROR"
			}

			// if the extracted level is I set INFO
			stage.replace {
				source     = "level"
				expression = "(D)"
				replace    = "DEBUG"
			}

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "klog",
				}
			}

			// set the extracted level to be a label
			stage.labels {
				values = {
					level = "",
				}
			}
		}

		// check to see if the log line matches the zerolog format
		stage.match {
			// unescaped regex: ^.+(TRC|DBG|INF|WRN|ERR|FTL|PNC)[^=]+(\w+=("[^"]*"|\S+))(\s+(\w+=("[^"]*"|\S+)))*\s*$
			selector = "{level=\"" + argument.default_level.value + "\"} |~ \"^.+(TRC|DBG|INF|WRN|ERR|FTL|PNC)[^=]+(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+))(\\\\s+(\\\\w+=(\\\"[^\\\"]*\\\"|\\\\S+)))*\\\\s*$\""

			// set the log_type
			stage.static_labels {
				values = {
					log_type = "zerolog",
				}
			}

			// extract the level from the log
			// unescaped regex: (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\s+)(?P<level>(TRC|DBG|INF|WRN|ERR|FTL|PNC)).+
			stage.regex {
				expression = "(?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}(T|\\s+)[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]+[^ ]*\\s+)(?P<level>(TRC|DBG|INF|WRN|ERR|FTL|PNC)).+"
			}

			// set the extracted level to be a label
			stage.labels {
				values = {
					level = "",
				}
			}
		}

		// if the level is still unknown, do one last attempt at detecting it based on common levels
		stage.match {
			selector = "{level=\"" + argument.default_level.value + "\"}"

			// unescaped regex: (?i)(?:"(?:level|loglevel|levelname|lvl|levelText|SeverityText)":\s*"|\s*(?:level|loglevel|levelText|lvl)="?|\s+\[?)(?P<level>(DEBUG?|DBG|INFO?(RMATION)?|WA?RN(ING)?|ERR(OR)?|CRI?T(ICAL)?|FATAL|FTL|NOTICE|TRACE|TRC|PANIC|PNC|ALERT|EMERGENCY))("|\s+|-|\s*\])
			stage.regex {
				expression = "(?i)(?:\"(?:level|loglevel|levelname|lvl|levelText|SeverityText)\":\\s*\"|\\s*(?:level|loglevel|levelText|lvl)=\"?|\\s+\\[?)(?P<level>(DEBUG?|DBG|INFO?(RMATION)?|WA?RN(ING)?|ERR(OR)?|CRI?T(ICAL)?|FATAL|FTL|NOTICE|TRACE|TRC|PANIC|PNC|ALERT|EMERGENCY))(\"|\\s+|-|\\s*\\])"
			}

			// set the extracted level to be a label
			stage.labels {
				values = {
					level = "",
				}
			}
		}
	}
}
