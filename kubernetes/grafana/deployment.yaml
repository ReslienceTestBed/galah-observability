---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app.kubernetes.io/name: grafana

spec:
  revisionHistoryLimit: 1
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        filter.by.port.name: "true"

    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsGroup: 65534
        runAsUser: 65534
      containers:
        - name: grafana
          image: docker.io/grafana/grafana:11.1.3
          imagePullPolicy: IfNotPresent
          args:
            - --config=/etc/grafana/conf/custom.ini
          ports:
            - containerPort: 3000
              name: http
          resources:
            requests:
              cpu: 50m
              memory: 512Mi
            limits:
              cpu: 100m
              memory: 1Gi
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/conf
            - name: grafana-storage
              mountPath: /var/lib/grafana
              subPath: grafana
            - name: grafana-storage
              mountPath: /var/lib/grafana/dashboards
              subPath: dashboards
            - name: dashboards
              mountPath: /etc/grafana/provisioning/dashboards
#              subPath: dashboards.yml
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: false
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          envFrom:
            - secretRef:
                name: grafana-env
      initContainers:
        - name: curl
          image: docker.io/curlimages/curl:latest
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
          args:
            - -c
            - >-
              which curl
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
              subPath: grafana
            - mountPath: /var/lib/grafana/dashboards
              name: grafana-storage
              subPath: dashboards
      volumes:
        - name: dashboards
          configMap:
            name: grafana-dashboards
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: grafana-storage
          emptyDir:
            sizeLimit: 1Gi
        - name: grafana-config
          configMap:
            name: grafana-config



