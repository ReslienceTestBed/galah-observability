declare "loki_sampling" {
	argument "forward_to" {
		comment = "Must be a list(LogsReceiver) where collected logs should be forwarded to"
	}

	argument "annotation" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		// k8s selectors do not support a logical OR, if multiple types of annotations are needed, This component should be invoked multiple times
		// i.e. metrics.grafana.com, then again for prometheus.io
		comment  = "The annotation namespace to use (default: logs.grafana.com)"
		default  = "logs.grafana.com"
		optional = true
	}

	argument "sampling_value" {
		comment  = "The regular expression to use to determine if the log should be sampled or not, if you want to sample the pod by default without setting the annotations everywhere use '.*' or 'true|' (default: true)"
		default  = "true"
		optional = true
	}

	argument "sampling_rate" {
		comment  = "The sampling rate in a range of [0, 1] (default: 0.25)"
		optional = true
		default  = 0.25
	}

	argument "sampling_reason" {
		comment  = "The sampling reason (default: annotation_sampling)"
		optional = true
		default  = "annotation_sampling"
	}

	/*
        Hidden Arguments
        These arguments are used to set reusable variables to avoid repeating logic
      */
	argument "__sd_annotation" {
		optional = true
		comment  = "The logic is used to transform the annotation argument into a valid label name by removing unsupported characters."
		default  = replace(replace(replace(coalesce(argument.annotation.value, "logs.grafana.com"), ".", "_"), "/", "_"), "-", "_")
	}

	export "annotation" {
		value = argument.annotation.value
	}

	export "receiver" {
		value = loki.process.sampling.receiver
	}

	loki.process "sampling" {
		forward_to = argument.forward_to.value

		// check logs.grafana.com/sampling annotation, if true the logs will be sampled at the specified rate
		stage.match {
			selector      = "{" + argument.__sd_annotation.value + "_sampling=~\"" + argument.sampling_value.value + "\"}"
			pipeline_name = "pipeline for annotation || " + argument.annotation.value + "/sampling: true"

			stage.sampling {
				rate                = argument.sampling_rate.value
				drop_counter_reason = argument.sampling_reason.value
			}
		}
	}
}

declare "otlp_sampling" { }
