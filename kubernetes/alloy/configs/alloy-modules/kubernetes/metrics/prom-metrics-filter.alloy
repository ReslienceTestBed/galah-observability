declare "filter_prom_metrics" {
	argument "forward_to" {
		optional = false
	}

	argument "keep_metrics" {
		optional = true
	}

	argument "drop_metrics" {
		optional = true
	}

	argument "max_cache_size" {
		optional = true
		default  = 100000
	}

	prometheus.relabel "filter_metrics" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}
	}

	export "metrics_receiver" {
		value = prometheus.relabel.filter_metrics.receiver
	}
}
