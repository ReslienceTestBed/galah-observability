declare "integrations_alloy" {
	argument "forward_to" {
		optional = false
	}

	argument "instance_name" { }

	argument "keep_metrics" {
		optional = true
		//TODO: This doesn't expose span metrics etc.
		default = "(prometheus_target_sync_length_seconds_sum|prometheus_target_scrapes_.*|prometheus_target_interval.*|prometheus_sd_discovered_targets|alloy_build.*|prometheus_remote_write_wal_samples_appended_total|process_start_time_seconds)"
	}

	argument "drop_metrics" {
		optional = true
	}

	argument "scrape_interval" {
		optional = true
		default  = "60s"
	}

	argument "scrape_timeout" {
		optional = true
		default  = "10s"
	}

	prometheus.exporter.self "integrations_alloy" { }

	discovery.relabel "integrations_alloy" {
		targets = prometheus.exporter.unix.integrations_alloy.targets

		rule {
			target_label = "job"
			replacement  = "integrations/alloy"
		}

		rule {
			target_label = "instance"
			replacement  = coalesce(argument.instance_name.value, constants.hostname)
		}

		rule {
			target_label = "alloy_hostname"
			replacement  = constants.hostname
		}
	}

	prometheus.scrape "alloy" {
		targets = discovery.relabel.integrations_alloy.output

		scrape_classic_histograms = true

		scrape_interval = argument.scrape_interval.value
		scrape_timeout  = argument.scrape_timeout.value

		clustering {
			enabled = true
		}

		forward_to = [prometheus.relabel.integrations_alloy.receiver]
	}

	prometheus.relabel "integrations_alloy" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}
	}
}
