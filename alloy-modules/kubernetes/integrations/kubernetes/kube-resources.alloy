declare "integrations_scrape_kube_resources" {
	argument "forward_to" {
		comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
	}

	argument "field_selectors" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		comment  = "The label selectors to use to find matching targets (default: [\"metadata.name=kubernetes\"])"
		optional = true
	}

	argument "label_selectors" {
		// Docs: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
		comment  = "The label selectors to use to find matching targets (default: [])"
		optional = true
	}

	argument "job_label" {
		comment  = "The job label to add for all resources metric (default: integrations/kubernetes/kube-resources)"
		optional = true
	}

	argument "keep_metrics" {
		comment  = "A regular expression of metrics to keep (default: see below)"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regular expression of metrics to drop (default: see below)"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
	}

	argument "max_cache_size" {
		comment  = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
		optional = true
	}

	argument "clustering" {
		// Docs: https://grafana.com/docs/agent/latest/flow/concepts/clustering/
		comment  = "Whether or not clustering should be enabled (default: false)"
		optional = true
	}

	export "output" {
		value = discovery.relabel.kube_resources.output
	}

	// resources service discovery for all of the nodes
	discovery.kubernetes "kube_resources" {
		role = "node"

		selectors {
			role  = "node"
			field = join(coalesce(argument.field_selectors.value, []), ",")
			label = join(coalesce(argument.label_selectors.value, []), ",")
		}
	}

	// resources relabeling (pre-scrape)
	discovery.relabel "kube_resources" {
		targets = discovery.kubernetes.kube_resources.targets

		// set the address to use the kubernetes service dns name
		rule {
			target_label = "__address__"
			replacement  = "kubernetes.default.svc.cluster.local:443"
		}

		// set the metrics path to use the proxy path to the nodes resources metrics endpoint
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			regex         = "(.+)"
			replacement   = "/api/v1/nodes/${1}/proxy/metrics/resource"
			target_label  = "__metrics_path__"
		}

		// set the node label
		rule {
			source_labels = ["__meta_kubernetes_node_name"]
			target_label  = "node"
		}

		// set the app name if specified as metadata labels "app:" or "app.kubernetes.io/name:" or "k8s-app:"
		rule {
			action        = "replace"
			source_labels = [
				"__meta_kubernetes_node_label_app_kubernetes_io_name",
				"__meta_kubernetes_node_label_k8s_app",
				"__meta_kubernetes_node_label_app",
			]
			separator    = ";"
			regex        = "^(?:;*)?([^;]+).*$"
			replacement  = "$1"
			target_label = "app"
		}

		// set a source label
		rule {
			action       = "replace"
			replacement  = "kubernetes"
			target_label = "source"
		}
	}
	// resources scrape job
	prometheus.scrape "kube_resources" {
		job_name          = coalesce(argument.job_label.value, "integrations/kubernetes/kube-resources")
		forward_to        = [prometheus.relabel.kube_resources.receiver]
		targets           = discovery.relabel.kube_resources.output
		scheme            = "https"
		scrape_interval   = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout    = coalesce(argument.scrape_timeout.value, "10s")
		bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"

		tls_config {
			ca_file              = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
			insecure_skip_verify = false
			server_name          = "kubernetes"
		}

		clustering {
			enabled = coalesce(argument.clustering.value, false)
		}
	}

	// resources metric relabelings (post-scrape)
	prometheus.relabel "kube_resources" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}
	}
}
