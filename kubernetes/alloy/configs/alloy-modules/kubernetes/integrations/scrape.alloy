declare "integrations_scrape" {
	argument "targets" {
		comment = "Must be a list() of targets"
	}

	argument "forward_to" {
		comment = "Must be a list(MetricsReceiver) where collected logs should be forwarded to"
	}

	argument "job_label" {
		comment  = "The job label to add for all metrics"
		optional = false
	}

	argument "keep_metrics" {
		comment  = "A regular expression of metrics to keep"
		optional = true
	}

	argument "drop_metrics" {
		comment  = "A regular expression of metrics to drop"
		optional = true
	}

	argument "scrape_interval" {
		comment  = "How often to scrape metrics from the targets (default: 60s)"
		optional = true
		default  = "60s"
	}

	argument "scrape_timeout" {
		comment  = "How long before a scrape times out (default: 10s)"
		optional = true
		default  = "10s"
	}

	argument "max_cache_size" {
		comment  = "The maximum number of elements to hold in the relabeling cache (default: 100000).  This should be at least 2x-5x your largest scrape target or samples appended rate."
		optional = true
		default  = 100000
	}

	argument "clustering" {
		comment  = "Whether or not clustering should be enabled (default: false)"
		optional = true
		default  = false
	}

	prometheus.scrape "integrations_scrape" {
		job_name        = argument.job_label.value
		forward_to      = [prometheus.relabel.integrations_relabel.receiver]
		targets         = argument.targets.value
		scrape_interval = coalesce(argument.scrape_interval.value, "60s")
		scrape_timeout  = coalesce(argument.scrape_timeout.value, "10s")

		clustering {
			enabled = coalesce(argument.clustering.value, false)
		}
	}

	// metric relabeling (post-scrape)
	prometheus.relabel "integrations_relabel" {
		forward_to     = argument.forward_to.value
		max_cache_size = coalesce(argument.max_cache_size.value, 100000)

		// drop metrics that match the drop_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.drop_metrics.value, "(^(go|process)_.+$)")
			action        = "drop"
		}

		// keep only metrics that match the keep_metrics regex
		rule {
			source_labels = ["__name__"]
			regex         = coalesce(argument.keep_metrics.value, "(.+)")
			action        = "keep"
		}
		/*
		// set the job label to be namespace/pod as this is what the cloud integration expects
		rule {
			action        = "replace"
			source_labels = [
				"namespace",
				"workload",
			]
			separator    = "/"
			regex        = "(.+)/.+/(.+)"
			replacement  = "$1/$2"
			target_label = "job"
		}
		*/
	}
}
